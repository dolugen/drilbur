{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["api_url","get_countries","countries","get_cities","cities","get_locations","locations","PlacesViewer","props","handlePlaceChange","bind","state","places","name","length","findPlace","this","setState","class","onSearchTextChange","React","Component","Place","placeLink","placeType","code","country","id","location","city","className","to","PlacesList","map","place","key","Country","countryCode","useParams","result","filter","c","cityName","l","locationId","locationName","count","href","rel","target","type","City","stations","Countries","match","useRouteMatch","path","Locations","Location","sourceName","government","coordinates","longitude","latitude","firstUpdated","lastUpdated","parameters","join","Breadcrumbs","aria-label","CountryLinkItem","CityLinkItem","LocationLinkItem","regex","RegExp","locationMatches","item","cityMatches","concat","SearchForm","handleTextChange","e","value","onChange","App","basename","process","Boolean","window","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ca878d69.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useRouteMatch,\n  useParams\n} from \"react-router-dom\";\nimport * as countries from './data/countries.json';\nimport * as cities from './data/cities.json';\nimport * as locations from './data/locations.json';\n\nconst api_url = 'https://api.openaq.org/v1/'\n\nconst get_countries = () => countries.results\nconst get_cities = () => cities.results\nconst get_locations = () => locations.results\n\nclass PlacesViewer extends React.Component {\n  constructor(props) {\n    super(props)\n    this.handlePlaceChange = this.handlePlaceChange.bind(this)\n    this.state = {\n      places: get_countries()\n    }\n  }\n\n  handlePlaceChange(name) {\n    // reset countries list\n    if (name.length === 0) {\n      this.setState({places: get_countries()})\n      return\n    }\n    // TODO: update URL with query param\n    // start searching on 2nd char\n    if (name.length < 2) return\n    const places = findPlace(name)\n    this.setState({name: name, places: places})\n  }\n\n  render() {\n    return (\n      <div class=\"\">\n        <SearchForm onSearchTextChange={this.handlePlaceChange} />\n        <PlacesList places={this.state.places} />\n      </div>\n    )\n  }\n}\n\nconst Place = (props) => {\n  const placeType = props.placeType\n  let name\n  let placeLink\n  if (placeType === \"country\" || props.code) {\n    placeLink = `/countries/${props.code}`\n    name = props.name || `Name Unknown (code: ${props.code})`\n  } else if (placeType === \"city\") {\n    placeLink = `/countries/${props.country}/cities/${props.name}/`\n    name = `${props.name}, ${props.country}`\n  } else {\n    placeLink = `/locations/${props.id}`\n    name = `${props.location}, ${props.city}, ${props.country}`\n  }\n  return (\n    <li className={placeType}>\n      <Link to={placeLink}>{name || props.name}</Link>\n    </li>\n  )\n}\n\nconst PlacesList = (props) => {\n  const places = props.places.map(place => <Place key={place.id} {...place} />)\n  return (\n    <ul className=\"is-size-3 has-text-weight-bold\">\n      {places}\n    </ul>\n  )\n}\n\nconst Country = () => {\n  const { countryCode } = useParams()\n  const result = get_countries().filter(country => country.code === countryCode)\n  if (result.length === 0) return <h2>Country with code \"{countryCode}\" not found.</h2>\n  const country = result[0]\n  const cities = get_cities()\n                  .filter(c => c.country === countryCode)\n                  .map(c => <CityLinkItem countryCode={countryCode} cityName={c.name} />)\n  const locations = get_locations()\n                      .filter(l => l.country === countryCode)\n                      .map(l => <LocationLinkItem locationId={l.id} locationName={l.location} />)\n  return (\n    <div>\n      <Breadcrumbs countryCode={countryCode} />\n      <h2 className=\"title is-2\">{country.name}</h2>\n      <ul>\n        <li>Code: {country.code}</li>\n        <li>Total measurements: {country.count}</li>\n        <li>Total number of measurement stations: {country.locations}</li>\n        <li>Number of cities with stations: {country.cities}</li>\n      </ul>\n      <h3 className=\"title is-3\">Links</h3>\n      <ul>\n        <li><a href={`${api_url}measurements?country=${country.code}`} rel=\"noopener noreferrer\" target=\"_blank\">Measurements (JSON response - opens in new window)</a></li>\n        <li><a href={`${api_url}latest?country=${country.code}`} rel=\"noopener noreferrer\" target=\"_blank\">Latest Measurements (JSON response - opens in new window)</a></li>\n      </ul>\n      <h3 className=\"title is-3\">Cities ({cities.length})</h3>\n      <ol type=\"1\" className=\"is-size-4\">\n        {cities}\n      </ol>\n      <h3 className=\"title is-3\">Stations ({locations.length})</h3>\n      <ol type=\"1\" className=\"is-size-4\">\n        {locations}\n      </ol>\n    </div>\n  )\n}\n\nconst City = () => {\n  const { countryCode, cityName } = useParams()\n  const result = get_cities().filter(c => c.country === countryCode && c.name === cityName)\n  if (result.length === 0) return <h2>City with name \"{cityName}\" not found.</h2>\n  const city = result[0]\n  const stations = get_locations()\n                    .filter(l => l.country === countryCode && l.city === cityName)\n                    .map(l => <LocationLinkItem locationId={l.id} locationName={l.location} />)\n  return (\n    <div>\n      <Breadcrumbs countryCode={countryCode} cityName={cityName} />\n      <h2 className=\"title is-2\">{cityName}</h2>\n      <ul>\n        <li>Country: <Link to={`/countries/${city.country}`}>{city.country}</Link></li>\n        <li>Total number of measurements: {city.count}</li>\n        <li>Number of stations: {city.locations}</li>\n      </ul>\n      <h3 className=\"title is-3\">Stations ({stations.length})</h3>\n      <ul className=\"is-size-4\">\n        {stations}\n      </ul>\n    </div>\n  )\n}\n\nconst Countries = () => {\n  let match = useRouteMatch()\n\n  return (\n    <div>\n      <Switch>\n        <Route path={`${match.path}/:countryCode/cities/:cityName`}>\n          <City />\n        </Route>\n        <Route path={`${match.path}/:countryCode`}>\n          <Country />\n        </Route>\n        <Route path={match.path}>\n          <h2>Please select a country or a city.</h2>\n        </Route>\n      </Switch>\n    </div>\n  )\n}\n\nconst Locations = () => {\n  let match = useRouteMatch()\n\n  return (\n    <div>\n      <Switch>\n        <Route path={`${match.path}/:locationId`}>\n          <Location />\n        </Route>\n        <Route path={match.path}>\n          <h2>Please select a location.</h2>\n        </Route>\n      </Switch>\n    </div>\n  )\n}\n\nconst Location = () => {\n  const { locationId } = useParams()\n  const result = get_locations()\n                    .filter(l => l.id === locationId)\n  if (result.length === 0) return <h2>Location with ID {locationId} not found.</h2>\n  const location = result[0]\n  return (\n    <div>\n      <Breadcrumbs\n        countryCode={location.country}\n        cityName={location.city}\n        locationId={location.id}\n        locationName={location.location} />\n      <h2 className=\"title is-2\">Location: {location.location}</h2>\n      <ul>\n        <li>ID: {location.id}</li>\n        <li>Country: <Link to={`/countries/${location.country}`}>{location.country}</Link></li>\n        <li>City: <Link to={`/countries/${location.country}/cities/${location.city}`}>{location.city}</Link></li>\n        <li>Source name: {location.sourceName}</li>\n        <li>Source type: {location.government}</li>\n        <li>Coordinates: {location.coordinates.longitude}, {location.coordinates.latitude}</li>\n        <li>First updated: {location.firstUpdated}</li>\n        <li>Last updated: {location.lastUpdated}</li>\n        <li>Pollutants measured: {location.parameters.join(', ')}</li>\n      </ul>\n    </div>\n  )\n}\n\nconst Breadcrumbs = ({countryCode, cityName, locationName, locationId}) => {\n  return <nav class=\"breadcrumb\" aria-label=\"breadcrumbs\">\n    <ul>\n      <li><Link to=\"/\">Home</Link></li>\n      {countryCode ? <CountryLinkItem countryCode={countryCode} /> : ''}\n      {countryCode && cityName ? <CityLinkItem countryCode={countryCode} cityName={cityName} /> : ''}\n      {locationName && locationId ? <LocationLinkItem locationName={locationName} locationId={locationId} /> : ''}\n    </ul>\n  </nav>\n}\n\nconst CountryLinkItem = ({countryCode}) => {\n  return <li><Link to={`/countries/${countryCode}`}>{countryCode}</Link></li>\n}\n\nconst CityLinkItem = ({countryCode, cityName}) => {\n  return <li><Link to={`/countries/${countryCode}/cities/${cityName}`}>{cityName}</Link></li>\n}\n\nconst LocationLinkItem = ({locationName, locationId}) => {\n  return <li><Link to={`/locations/${locationId}`}>{locationName}</Link></li>\n}\n\nconst findPlace = (place) => {\n  const regex = new RegExp(place, 'gi')\n  const locationMatches = get_locations()\n                            .filter(item => item.location && item.location.match(regex))\n                            .map(item => ({\n                              placeType: 'location',\n                              name: item.location,\n                              ...item}))\n  const cityMatches = get_cities()\n                        .filter(city => city.name.match(regex))\n                        .map(item => ({\n                          placeType: 'city',\n                          id: item.name + '_' + item.country,\n                          ...item }))\n  const countryMatches = get_countries()\n                          .filter(country => country.name && country.name.match(regex))\n                          .map(item => ({\n                            placeType: 'country',\n                            id: item.code,\n                            ...item}))\n  \n  return countryMatches.concat(cityMatches).concat(locationMatches)\n}\n\nclass SearchForm extends React.Component {\n  constructor(props) {\n    super(props)\n    this.handleTextChange = this.handleTextChange.bind(this)\n  }\n\n  handleTextChange(e) {\n    this.props.onSearchTextChange(e.target.value)\n  }\n\n  render() {\n    return (\n      <div class=\"field\">\n        <label className=\"label is-large\">Search for a place: </label>\n        <input class=\"input is-large is-primary\" type=\"text\" onChange={this.handleTextChange} />\n        <p class=\"help\">Name of a country, a city, or a station</p>\n      </div>\n    )\n  }\n}\n\nfunction App() {\n  return (\n    <Router basename={process.env.PUBLIC_URL || '/'}>\n      <div className=\"\">\n        <h1 class=\"title is-1 is-size-1 is-spaced\">Let's get some air quality data</h1>\n        <Switch>\n            <Route path=\"/countries\">\n              <Countries />\n            </Route>\n            <Route path=\"/locations\">\n              <Locations />\n            </Route>\n            <Route path=\"/\">\n              <PlacesViewer />\n            </Route>\n          </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}